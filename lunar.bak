#lang racket

;; this is the code for problem set -- Lunar Lander

; terminal i/o primitives supported in MIT Scheme but not DrScheme -----------

(define write-line
  (lambda (line)
    (begin
      (display line)
      (newline))))

(define prompt-for-command-char 
  (lambda (prompt)
    (begin
        (display prompt)
        (read))))

; Lunar Landar functions -----------------------------------------------------


; Problem 1 ------------------------------------------------------------------


(define make-ship-state
  (lambda(height velocity fuel)
    (list height velocity fuel)))





















(define update 
  (lambda (ship-state fuel-burn-rate)
    (make-ship-state
     (+ (height ship-state) (* (velocity ship-state) dt)) ; height
     (+ (velocity ship-state)
        (* (- (*  engine-strength fuel-burn-rate) gravity)
           dt))                                           ; velocity
     (- (fuel ship-state) (* fuel-burn-rate dt)))))       ; fuel
  
(define lander-loop
  (lambda (ship-state)
    (show-ship-state ship-state)
    (if (landed? ship-state)
        (end-game ship-state)
        (lander-loop (update ship-state (get-burn-rate))))))

(define show-ship-state 
  (lambda (ship-state)
    (write-line 
      (list 'height (height ship-state)
            'velocity (velocity ship-state)
            'fuel (fuel ship-state)))))

(define landed? 
  (lambda (ship-state)
    (<= (height ship-state) 0)))

(define end-game 
  (lambda (ship-state)
    (let ((final-velocity (velocity ship-state)))
         (write-line final-velocity)
         (cond ((>= final-velocity safe-velocity)
                 (write-line "good landing")
                 'game-over)
               (else
                 (write-line "you crashed!")
                 'game-over)))))

(define get-burn-rate
  (lambda ()
    (if (eq? (player-input) burn-key)
        1
        0)))

(define play 
  (lambda ()
    (lander-loop (initial-ship-state))))

; making initial-ship-state a function allows make-ship-state to remain
; unwritten without causing a load-time error
(define initial-ship-state 
  (lambda ()
    (make-ship-state 50       ; 50 km high
                     0        ; not moving (0 km/sec)
                     20)))    ; 20 kg of fuel left

(define dt 1)               ; 1 second interval of simulation
  
(define gravity 0.5)        ; 0.5 km/sec/sec
  
(define safe-velocity -0.5) ; 0.5 km/sec or faster is a crash

(define engine-strength 1)  ; 1 kilonewton-second

(define player-input
  (lambda ()
    (prompt-for-command-char " action: ")))

(define burn-key 'b)

